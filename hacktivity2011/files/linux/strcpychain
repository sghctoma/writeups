#!/usr/bin/env ruby

msfbase = __FILE__
while File.symlink?(msfbase)
	msfbase = File.expand_path(File.readlink(msfbase), File.dirname(msfbase))
end

$:.unshift(File.join(File.dirname(msfbase), 'lib'))
$:.unshift(ENV['MSF_LOCAL_LIB']) if ENV['MSF_LOCAL_LIB']

require 'rex/elfparsey'
require 'rex/elfscan'
require 'rex/arch/x86'
require 'optparse'

def opt2i(o)
	o.index("0x")==0 ? o.hex : o.to_i
end

opt = OptionParser.new

opt.banner = "Usage: #{$PROGRAM_NAME} [params] <options> [target]"
opt.separator('')
opt.separator('Parameters:')

worker = Rex::ElfScan::Scanner::StrcpyRegexScanner
param = {}

opt.on('-b', '--bytes [bytes]', 'Shellcode bytes') do |t|
	param['bytes'] = t
end

opt.on('-s', '--strcpy [strcpy]', 'Address of strcpy@PLT or equivalent function') do |t|
	param['strcpy'] = opt2i(t)
end

opt.on('-p', '--poppopret [poppopret]', 'Address of pop # pop # ret') do |t|
	param['poppopret'] = opt2i(t)
end

opt.on('-t', '--target [target]', 'Where to put the shellcode') do |t|
	param['target'] = opt2i(t)
end

opt.separator('')
opt.separator('Options:')

opt.on('-l', '--language [lang]', 'Exploit language ([p]ython|p[y]thon)') do |t|
	param['lang'] = t
end

opt.on_tail("-h", "--help", "Show this message") do
	puts opt
	exit(1)
end

begin
	opt.parse!
rescue OptionParser::InvalidOption
	puts "Invalid option, try -h for usage"
	exit(1)
end

if param['bytes'] == nil or \
	param['strcpy'] == nil or \
	param['target'] == nil or \
	param['poppopret'] == nil then
	puts opt
	exit(1)
end

file = ARGV[0]
param['file'] = file

begin
	elf = Rex::ElfParsey::Elf.new_from_file(file, true)
rescue Rex::ElfParsey::ElfHeaderError
	if $!.message == 'Invalid magic number'
		$stderr.puts("Skipping #{file}: #{$!}")
		exit(1)
	end
	raise $!
rescue Errno::ENOENT
	$stderr.puts("File does not exist: #{file}")
	exit(1)
end

if (param['imagebase'])
	elf.base_addr = param['imagebase'];
end

buffer = ""

o = worker.new(elf)

param['bytes'].scan(/\\x../).each do |b|
	param['args'] = b
	o.scan(param, buffer)
	param['target'] += 1
end

if param['lang'] == nil then
	count = 1
	buffer.unpack('C*').each do |b|
		printf("\\x%02x", b)
		if count %  14 == 0 then
			printf("\n")
		end

		count = count + 1
	end
end

elf.close

